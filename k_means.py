# -*- coding: utf-8 -*-
"""K means.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qf6gP2bjzj43wvtEpaJxmgiZJgEaXNKe
"""

# Import necessary libraries
import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler

# Load the dataset
file_path = '/content/sales_data_sample_11.csv'  # Update with your dataset file path
df = pd.read_csv(file_path, encoding='ISO-8859-1')

# Selecting relevant numerical columns for clustering
numerical_columns = ['SALES', 'QUANTITYORDERED', 'PRICEEACH']
df_numerical = df[numerical_columns]

# Standardizing the data before clustering
scaler = StandardScaler()
scaled_data = scaler.fit_transform(df_numerical)

# Elbow method to determine the optimal number of clusters
sse = []
k_range = range(1, 11)

for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    sse.append(kmeans.inertia_)

# Plotting the elbow method result
plt.figure(figsize=(8, 5))
plt.plot(k_range, sse, marker='o')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of clusters (k)')
plt.ylabel('Sum of Squared Errors (SSE)')
plt.xticks(k_range)
plt.grid(True)
plt.show()

# After determining the optimal number of clusters (e.g., 3 clusters)
optimal_clusters = 3
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
kmeans.fit(scaled_data)

# Add the cluster labels to the original dataframe
df['Cluster'] = kmeans.labels_

# Display the first few rows of the dataframe with cluster labels
print(df.head())